services:
  # OpenTelemetry Collector - OTLP endpoint for traces
  otel-collector:
    image: otel/opentelemetry-collector-contrib:latest
    container_name: otel-collector
    command: ["--config=/etc/otel-collector-config.yml"]
    volumes:
      - ./telemetry-config/otel-collector-config.yml:/etc/otel-collector-config.yml
    ports:
      - "4317:4317"   # OTLP gRPC receiver
      - "4318:4318"   # OTLP HTTP receiver
      - "8888:8888"   # Prometheus metrics
      - "13133:13133" # Health check endpoint
    depends_on:
      - tempo
      - loki
    networks:
      - telemetry

  # Tempo - Distributed tracing backend
  tempo:
    image: grafana/tempo:latest
    container_name: tempo
    command: ["--config.file=/etc/tempo.yml"]
    ports:
      - "3200:3200"   # Tempo HTTP API
      - "4319:4317"   # OTLP gRPC receiver (direct)
    volumes:
      - ./telemetry-config/tempo-config.yml:/etc/tempo.yml
      - tempo-data:/var/tempo
    networks:
      - telemetry

  # Prometheus - Metrics collection and storage
  prometheus:
    image: prom/prometheus:latest
    container_name: prometheus
    command:
      - '--config.file=/etc/prometheus/prometheus.yml'
      - '--storage.tsdb.path=/prometheus'
      - '--web.console.libraries=/etc/prometheus/console_libraries'
      - '--web.console.templates=/etc/prometheus/consoles'
      - '--web.enable-lifecycle'
      - '--web.enable-admin-api'
      - '--web.enable-remote-write-receiver'
    ports:
      - "9090:9090"
    volumes:
      - ./telemetry-config/prometheus.yml:/etc/prometheus/prometheus.yml
      - prometheus-data:/prometheus
    networks:
      - telemetry

  # Loki - Log aggregation system
  loki:
    image: grafana/loki:latest
    container_name: loki
    command: ["--config.file=/etc/loki/local-config.yaml"]
    ports:
      - "3100:3100"
    volumes:
      - ./telemetry-config/loki-config.yml:/etc/loki/local-config.yaml
      - loki-data:/loki
    networks:
      - telemetry

  # Promtail - Log collection agent
  promtail:
    image: grafana/promtail:latest
    container_name: promtail
    command: ["--config.file=/etc/promtail/config.yml"]
    volumes:
      - ./telemetry-config/promtail-config.yml:/etc/promtail/config.yml
      - /var/log:/var/log:ro
      - /var/lib/docker/containers:/var/lib/docker/containers:ro
      - /var/run/docker.sock:/var/run/docker.sock
    depends_on:
      - loki
    networks:
      - telemetry

  # Grafana - Dashboard and visualization
  grafana:
    image: grafana/grafana:latest
    container_name: grafana
    environment:
      - GF_SECURITY_ADMIN_PASSWORD=admin
      - GF_USERS_ALLOW_SIGN_UP=false
      - GF_INSTALL_PLUGINS=grafana-clock-panel,grafana-simple-json-datasource
    ports:
      - "3000:3000"
    volumes:
      - ./telemetry-config/grafana/provisioning:/etc/grafana/provisioning
      - ./telemetry-config/grafana/dashboards:/var/lib/grafana/dashboards
      - grafana-data:/var/lib/grafana
    depends_on:
      - prometheus
      - loki
      - tempo
    networks:
      - telemetry

  # Main Application Server - Unified packages
  app-unified:
    image: unified-telemetry-app:latest
    container_name: fastify-unified-app
    labels:
      - "logging=promtail"
      - "logging.jobname=fastify-unified-app"
    environment:
      - PORT=3001
      - ENABLE_TELEMETRY=true
      - CUSTOM_OTEL_CONFIG_ENABLED=false  # Use basic telemetry for better Prometheus metrics
      - OTEL_EXPORTER_OTLP_ENDPOINT=http://otel-collector:4318
      - OTEL_SERVICE_NAME=fastify-unified-example
      - OTEL_SERVICE_VERSION=1.0.0
      - PROMETHEUS_METRICS_PORT=9464
      - OTEL_ENABLE_PROMETHEUS=true  # Enable Prometheus metrics endpoint
      - APP_MODE=hybrid # Options: unified, enhanced, simple, hybrid
    ports:
      - "3001:3001"   # Application port
      - "9464:9464"   # Prometheus metrics endpoint
    depends_on:
      - otel-collector‚ùå Application failed to start within timeout
      - prometheus
      - loki
    volumes:
      - ./logs:/app/logs  # For promtail to collect logs
    networks:
      - telemetry

  # Alternative: Enhanced app server (with custom OtelConfig)
  app-server:
    image: unified-telemetry-app:latest
    container_name: fastify-telemetry-app
    labels:
      - "logging=promtail"
      - "logging.jobname=fastify-telemetry-app"
    environment:
      - PORT=3002
      - ENABLE_TELEMETRY=true
      - CUSTOM_OTEL_CONFIG_ENABLED=true  # Use custom OtelConfig
      - OTEL_EXPORTER_OTLP_ENDPOINT=http://otel-collector:4318
      - OTEL_SERVICE_NAME=fastify-telemetry-example
      - OTEL_SERVICE_VERSION=1.0.0
      - PROMETHEUS_METRICS_PORT=9464
      - OTEL_ENABLE_PROMETHEUS=true
      - APP_MODE=enhanced  # Options: enhanced, unified, simple
    ports:
      - "3002:3002"   # Application port
      - "9465:9464"   # Prometheus metrics endpoint
    depends_on:
      - otel-collector
      - prometheus
      - loki
    volumes:
      - ./logs:/app/logs  # For promtail to collect logs
    networks:
      - telemetry
    profiles:
      - enhanced  # Only start with: docker-compose --profile enhanced up

  # Alternative: Simple mock app (without external dependencies)
  app-simple:
    image: unified-telemetry-app:latest
    container_name: fastify-simple-app
    labels:
      - "logging=promtail"
      - "logging.jobname=fastify-simple-app"
    environment:
      - PORT=3003
      - ENABLE_TELEMETRY=true
      - CUSTOM_OTEL_CONFIG_ENABLED=false  # Use basic telemetry
      - APP_MODE=simple
    ports:
      - "3003:3003"   # Application port
    volumes:
      - ./logs:/app/logs
    networks:
      - telemetry
    profiles:
      - simple  # Only start with: docker-compose --profile simple up

volumes:
  prometheus-data:
  loki-data:
  tempo-data:
  grafana-data:

networks:
  telemetry:
    driver: bridge
